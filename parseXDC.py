# A quick and dirty effort at parsing the pin names and "numbers"
# generated by the Xilinx MIG.

from pyparsing import *

def toList(filename):
    """ Parses input file XDC into nested list. Ignores a lot of stuff
    deemed unimportant.
    """
    pt_portname = Word(alphanums+'_')
    pt_portname_bus = Word(alphanums+"_[]*")

    pt_get_ports = Suppress('[') + Keyword('get_ports') + \
                    Suppress('{') + (pt_portname_bus|pt_portname) + \
                    Suppress('}') + Suppress(']')
    pt_get_cells = Suppress('[') + Keyword('get_cells') + \
                    Suppress(restOfLine) #ignore

    pt_set_property = Keyword('set_property') + Word(alphanums+'_') + \
                        Word(alphanums+'_') + (pt_get_ports|pt_get_cells)

    pt_continuation = ('\\' + LineEnd()).suppress()
    pt_set_other = Literal('set_') + Suppress(restOfLine) + Optional(pt_continuation)

    parser =  ZeroOrMore (Group (pt_set_property | pt_set_other) ) 

    parser.ignore('#' + restOfLine)

    result_list = parser.parseFile(filename)

    return result_list

def makeDict(result_list):
    """ Constructs nested Dict from results of parsetolist.
    e.g. {'pin_name' :  {'PACKAGE_PIN': 'A1',
                         'SLEW': 'FAST',
                            etc. } }
    """
    
    result_dict = dict()
    for line in result_list:
        if line[0] == 'set_property' and line[3] == 'get_ports':
            if line[4] not in result_dict:
                result_dict[line[4]] = dict()
            result_dict[line[4]][line[1]] = line[2]

    return result_dict
